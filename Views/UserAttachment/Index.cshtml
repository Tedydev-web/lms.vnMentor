@model vnMentor.Models.UserAttachmentListing
@using vnMentor.CustomHelper
@using vnMentor.Models
@using vnMentor.Resources

@{
    ViewBag.Module = Resource.UserAttachment;
    ViewBag.Title = Resource.UserAttachment;
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
    ViewBag.TableIdPrefix = "userattachment";
    ViewBag.PartialViewWrapper = "userattachment-partialview";
}

<div class="row">
    <div class="col-12">
        <div style="--bs-breadcrumb-divider: '>';">
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("index","user")">@Resource.UserManagement</a></li>
                <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("viewrecord","user", new { Id = Model.UserProfileId })">@Resource.ViewUser</a></li>
                <li class="breadcrumb-item fw-normal active">@Resource.ManageUserAttachment</li>
            </ol>
        </div>
        <div class="page-title-box d-sm-flex align-items-center justify-content-between pt-2">
            <h4 class="pagetitle mb-sm-0 fw600">@Resource.ManageUserAttachment</h4>
        </div>
    </div>
</div>

<section class="section dashboard mt-3">
    <div class="bg-white rounded p-3 p-lg-4 px-lg-5 shadow">
        <h2 class="fs-20 fw600 mb-4">@Resource.ManageAttachmentsFor</h2>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3 text-break">
                    <div>@Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "fw600" })</div>
                    <div>@Html.DisplayFor(model => model.Username, new { htmlAttributes = new { @class = "form-control d-block" } })</div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3 text-break">
                    <div>@Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "fw600" })</div>
                    <div>@Html.DisplayFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })</div>
                </div>
            </div>
        </div>
    </div>
    <div class="bg-white rounded p-3 p-lg-4 px-lg-5 shadow mt-4 position-relative h-100 w-100">
        <div class="pb-2">
            <a class="btn form-btn btn-primary hover-boxshadow hover-moveup hover-bg-primarycolor" href="@Url.Action("upload", new { Id = Model.UserProfileId })"><i class="fa-solid fa-plus pe-1"></i> @Resource.UploadFiles</a>
            <span onclick="exportToExcel('@ViewBag.TableIdPrefix', '@Resource.TableIsStillLoading')" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.ExportToExcelNote" class="btn form-btn btn-secondary hover-boxshadow cursor-pointer hover-moveup"><i class="fa-solid fa-file-excel pe-1"></i> @Resource.ExporttoExcel</span>
            <span onclick="exportToPdf('@ViewBag.TableIdPrefix', '@Resource.TableIsStillLoading')" data-bs-toggle="tooltip" data-bs-placement="right" title="@Resource.ExportToPDFNote" class="btn form-btn btn-secondary hover-boxshadow cursor-pointer hover-moveup"><i class="fa-solid fa-file-pdf pe-1"></i> @Resource.ExporttoPdf</span>
        </div>
        <div class="spinner-container d-none">
            <div class="spinner d-flex justify-content-center align-items-center text-center color-primarycolor py-5">
                <div class="py-3">
                    <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div><strong> &nbsp; @Resource.Loading </strong>
                </div>
            </div>
        </div>
        <div id="@ViewBag.PartialViewWrapper">
            <!-- display a dummy empty table while loading the data -->
            <div class="table-responsive mb-5">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr><th class="thead"></th></tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="py-4"></div>
            <div class="dummyfooter row justify-content-between mt-5">
                <div class="col-md-6">@Resource.Showing0Entries</div>
                <div class="col-md-6 text-end">@Resource.Page0OfPage0</div>
            </div>
        </div>
    </div>
</section>

@section scripts{
    <script>
        var tableIdPrefix = "@ViewBag.TableIdPrefix";
        var fileName = "@Resource.UserAttachment"; //the file name for excel and pdf file (Export to excel, pdf feature)
        var partialview = "@ViewBag.PartialViewWrapper";
        var loadTableUrl = "@Url.Action("GetPartialViewUserAttachment", "UserAttachment", new { upId = Model.UserProfileId })";
        resetTable();

        function refreshTable(sort, search, pg, size) {
            if (sort == "undefined" || sort == undefined || sort == null) {
                sort = "";
            }
            if (pg == "undefined" || pg == undefined || pg == null) {
                pg = 1;
            }
            if (size == "undefined" || size == undefined || size == null) {
                size = "";
            }
            if (search == "undefined" || search == undefined || search == null) {
                let searchinput = document.querySelector('input[name="search"]');
                if (searchinput != null) {
                    if (searchinput.value == null || searchinput.value == "") {
                        search = "";
                    } else {
                        search = searchinput.value;
                    }
                } else {
                    search = "";
                }
            }
            $(".spinner-container").removeClass("d-none");
            var url = `${loadTableUrl}?sort=${sort}&search=${search}&pg=${pg}&size=${size}`;
            loadData(url);
        }

        function resetTable() {
            $(".spinner-container").removeClass("d-none");
            var url = loadTableUrl;
            loadData(url);
        }

        function loadData(url) {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    $(`#${partialview}`).html(data);
                    formatDateTimeText();
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                })
                .finally(() => {
                    $(".spinner-container").addClass("d-none");
                });
        }
    </script>
}